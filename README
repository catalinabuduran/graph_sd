Am inceput prin a citi variabilele N si M reprezentative, apoi o sa creez graful. Citesc cele M linii si pentru fiecare linie verific daca cele 2 stringuri date se afla in vectorul de stringuri; in caz contrar, acestea nu se afla si le vom adauga cu ajutorul functiei add_array. Am implementat functia cautare, ce cauta un string in vector si daca acesta e gasit, indicele respectiv va indica nodul atunci cand creez graful, astfel ca la final fiecarui string ii va corespunde un numar natural. In functie de nodurile si ordinea acestora citita in enunt, am adaugat muchii intre noduri cu ajutorul functiei insertEdge. Am aflat numarul componentelor conexe cu ajutorul parcurgerii in adancime a grafului.
Pentru a afla drumul minim ce trebuie renovat, am implementat functia Prim, reprezentand algoritmul lui Prim. Am initializat distanta fiecarui nod cu infinit si le-am marcat initial ca fiind nevizitate. Am creat o coada in care am adaugat initial doar nodul de start. Urmand apoi sa l extrag, fiind nodul cu costul minim din coada. L am marcat ca vizitat si apoi parcurg lista de adiacenta a acestuia. Pentru fiecare vecin al sau verific daca a fost nevizitat si daca costul e mai mic decat distanta, actualizez distanta, parintele si apoi il adaug in coada. Repet acest procedeu pana cand se goleste coada. Costul este dat de suma distantelor(costurilor), de fiecare data cand se extrage un nou nod din lista care are parinte.
Dupa apelarea functiei, am ordonat crescator costurile si apoi le-am afisat.
